Details on analysis of A.millepora 2bRAD data 
(Matz et al. 201t Adaptive pathways of coral populations on the Great Barrier Reef)

#---------------------
# Bayescan:  

# new pops file:
grep '#CHR' Amil_mapped2adig.vcf | perl -pe 's/\t/\n/g' | grep [0-9] | perl -pe 's/^(.)(.+)/$1$2\t$1/' >bspops

nano vcf2bayescan.spid
############
# VCF Parser questions
PARSER_FORMAT=VCF

# Do you want to include a file with population definitions?
VCF_PARSER_POP_QUESTION=true
# Only input following regions (refSeqName:start:end, multiple regions: whitespace separated):
VCF_PARSER_REGION_QUESTION=
# What is the ploidy of the data?
VCF_PARSER_PLOIDY_QUESTION=DIPLOID
# Only output following individuals (ind1, ind2, ind4, ...):
VCF_PARSER_IND_QUESTION=
# Output genotypes as missing if the read depth of a position for the sample is below:
VCF_PARSER_READ_QUESTION=
# Take most likely genotype if "PL" or "GL" is given in the genotype field?
VCF_PARSER_PL_QUESTION=true
# Do you want to exclude loci with only missing data?
VCF_PARSER_EXC_MISSING_LOCI_QUESTION=false
# Select population definition file:
VCF_PARSER_POP_FILE_QUESTION=./bspops
# Only output SNPs with a phred-scaled quality of at least:
VCF_PARSER_QUAL_QUESTION=
# Do you want to include non-polymorphic SNPs?
VCF_PARSER_MONOMORPHIC_QUESTION=false
# Output genotypes as missing if the phred-scale genotype quality is below:
VCF_PARSER_GTQUAL_QUESTION=

# GESTE / BayeScan Writer questions
WRITER_FORMAT=GESTE_BAYE_SCAN

# Specify which data type should be included in the GESTE / BayeScan file  (GESTE / BayeScan can only analyze one data type per file):
GESTE_BAYE_SCAN_WRITER_DATA_TYPE_QUESTION=SNP
############

# converting thinned biallelic vcf to bayescan format
java -Xmx1024m -Xms512m -jar ~/bin/PGDSpider_2.0.7.1/PGDSpider2-cli.jar -inputfile Amil_mapped2adig.vcf -outputfile Best.bayescan -spid vcf2bayescan.spid 

# launching bayescan
echo 'bayescan Best.bayescan -threads=20' >bs
#------------------------
# manual job creator

echo '#!/bin/bash
#SBATCH -J bscan
#SBATCH -n 24
#SBATCH -p normal
#SBATCH -o bscan.o%j
#SBATCH -e bscan.e%j
#SBATCH -t 24:00:00
#SBATCH -A tagmap
#SBATCH --mail-user=matz@utexas.edu
#SBATCH --mail-type=begin   # email me when the job starts
#SBATCH --mail-type=end     # email me when the job finishes

module load launcher

export LAUNCHER_PLUGIN_DIR=$LAUNCHER_DIR/plugins
export LAUNCHER_RMI=SLURM
export LAUNCHER_JOB_FILE=bs

$LAUNCHER_DIR/paramrun '>bscan.slurm

sbatch bscan.slurm
#-------------------------

#  use bayescan_plots.R to explore the results on your laptop; will need to scp
# Best.baye_fst.txt 

# in Best.baye_fst.txt, each line corresponds to a SNP
# how many SNPs have a qvalue less than 0.05 (and therefore are possibly under selection?) 
awk '$4<0.5' Best.baye_fst.txt | wc -l
# 73

removeBayescanOutliers.pl bayescan=bayescan/Best.baye_fst.txt vcf=Amil_mapped2adig.vcf FDR=0.5 mode=delete >best_adig_noBS.vcf
# kept 25359, 73 sites removed
#-----------------------------
# data thinned to 5k (min 2.5k, criterion=maxDP-random) 

thinner.pl vcf=best_adig_noBS.vcf criterion=maxDP-random interval=5000 >5kA3.vcf
# 10074 loci selected
thinner.pl vcf=best_adig_noBS.vcf criterion=maxDP-random interval=5000 >5kB3.vcf
# 10083 loci selected
thinner.pl vcf=best_adig_noBS.vcf criterion=maxDP-random interval=5000 >5kC3.vcf
# 10042 loci selected

#--------------------------------
# ADMIXTURE

scp best_adig_noBS.vcf cmonstr@ls5.tacc.utexas.edu:/scratch/01211/cmonstr/dadi7/

# thinning 
thinner.pl vcf=best_adig_noBS.vcf interval=5000 criterion=maxAF >bestAdm5k.vcf
#25406 total loci
#852 loci skipped because they were closer than 2500
#11426 loci selected

# faking chromosome numbers for silly plink:
cat bestAdm5k.vcf | perl -pe 's/_/z/g'  >bestAdm5k_znames.vcf
cat bestAdm5k_znames.vcf | perl -pe 's/^(gi\S+(\d)\.1\|)/chr1$2/' >adm5.vcf

# reformatting VCF into plink binary BED format
plink --vcf adm5.vcf --make-bed --out bestA
#11426 variants loaded from .bim file.
#104 people (0 males, 0 females, 104 ambiguous) loaded from .fam.
#Ambiguous sex IDs written to bestA.nosex .
#Using 1 thread (no multithreaded calculations invoked.
#Before main variant filters, 104 founders and 0 nonfounders present.
#Calculating allele frequencies... done.
#Total genotyping rate is 0.992632.
#11426 variants and 104 people pass filters and QC.\
#Note: No phenotypes present.

for K in 1 2 3 4 ; \
do admixture --cv bestA.bed $K | tee logBest${K}.out; done

		Pop0	
Pop0	
Pop1	0.025	

	Pop0	Pop1	
Pop0	
Pop1	0.030	
Pop2	0.020	0.030	

	Pop0	Pop1	Pop2	
Pop0	
Pop1	0.025	
Pop2	0.029	0.027	
Pop3	0.034	0.030	0.035	

grep -h CV logBest[1234].out
CV error (K=1): 0.40033
CV error (K=2): 0.41214
CV error (K=3): 0.42688
CV error (K=4): 0.44462

# listing individuals from vcf file for later plotting of ADMIXTURE results
grep "#CHROM" adm5.vcf | perl -pe 's/\t/\n/g' | grep [0-9] > inds.list
cat inds.list | perl -pe 's/(.)(\S+)/$1$2\t$1/' >inds2pops

# scp the *.Q and inds2pops files to laptop, plot it in R:
# use admixturePlotting3.R to plot (will require minor editing - population names)
#  no difference in admixture plot after removing bayescan outliers!

#--------------------------------
# creating pops table

vcftools --vcf 5kA3.vcf --het
cat out.het | cut -f 1 | perl -pe 's/^((\S)\S+)/$1\t$2/' | grep -v IND > inds2pops
echo "BEGIN">pops
cat inds2pops >>pops
echo "END" >>pops
grep -E "W$" pops | wc -l # 18 Wilke
grep -E "S$" pops| wc -l # 18 Sudbury
grep -E "O$" pops | wc -l # 28 Orpheus
grep -E "M$" pops | wc -l # 20 Magnetic
grep -E "K$" pops | wc -l # 20 Keppels

cat out.het | cut -f 1 | grep -E "^W" >w.pop
cat out.het | cut -f 1 | grep -E "^S" >s.pop
cat out.het | cut -f 1 | grep -E "^O" >o.pop
cat out.het | cut -f 1 | grep -E "^M" >m.pop
cat out.het | cut -f 1 | grep -E "^K" >k.pop

#--------------------------------
# pairwise Fst using admixture thinned data

vcftools --vcf bestAdm5k.vcf --weir-fst-pop w.pop --weir-fst-pop s.pop  # 0.0021652
vcftools --vcf bestAdm5k.vcf --weir-fst-pop w.pop --weir-fst-pop o.pop  # 0.0016929
vcftools --vcf bestAdm5k.vcf --weir-fst-pop w.pop --weir-fst-pop m.pop  # 0.003005
vcftools --vcf bestAdm5k.vcf --weir-fst-pop w.pop --weir-fst-pop k.pop  # 0.012813
vcftools --vcf bestAdm5k.vcf --weir-fst-pop s.pop --weir-fst-pop o.pop  # 0.0004194
vcftools --vcf bestAdm5k.vcf --weir-fst-pop s.pop --weir-fst-pop m.pop  # 0.00021197
vcftools --vcf bestAdm5k.vcf --weir-fst-pop s.pop --weir-fst-pop k.pop  # 0.0096461
vcftools --vcf bestAdm5k.vcf --weir-fst-pop o.pop --weir-fst-pop m.pop  # 0.00086879
vcftools --vcf bestAdm5k.vcf --weir-fst-pop o.pop --weir-fst-pop k.pop  # 0.0091892
vcftools --vcf bestAdm5k.vcf --weir-fst-pop m.pop --weir-fst-pop k.pop  # 0.0067853

#--------------------------------
# converting vcfs to dadi (need bioperl)

vcf2dadi.pl $WORK/db/adigitifera_genome.fasta 5kA3.vcf pops
mv pops.data 5kA3_dadi.data

vcf2dadi.pl $WORK/db/adigitifera_genome.fasta 5kB3.vcf pops
mv pops.data 5kB3_dadi.data

vcf2dadi.pl $WORK/db/adigitifera_genome.fasta 5kC3.vcf pops
mv pops.data 5kC3_dadi.data

#--------------------------------
# Best dadi projection settings (projections_calc.py on 5kA2_dadi.data to maximize number of segregating sites):

pop projected_N nSites
W 32  6268
S 34  6353
O 52  7193
M 38  6663
K 36  6143

#--------------------------------
# bootstrapping data

mkdir boots
cp *dadi.data boots
cd boots
ls *3_dadi.data | perl -pe 's/(\S+)/dadiBoot.pl in=$1 boot=60/' | bash
rm *dadi.data

#--------------------------------
# Running dadi models (make a job script for your cluster out of each command-listing file):

# S2M model: instantaneous divergence into 2 pops of diff sizes, asymmetrical migration
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 W S 32 34/' >s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 W O 32 52/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 W M 32 38/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 W K 32 36/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 S O 34 52/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 S M 34 38/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 S K 34 36/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 O M 52 38/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 O K 52 36/' >>s2m
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2m_auto.py $1 M K 38 36/' >>s2m

# twoepoch2d (null for S2M)
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 W S 32 34/' >te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 W O 32 52/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 W M 32 38/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 W K 32 36/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 S O 34 52/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 S M 34 38/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 S K 34 36/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 O M 52 38/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 O K 52 36/' >>te2d
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twoepoch2d_null.py $1 M K 38 36/' >>te2d


# s2mRM : s2m model with  migration change at T=0.01 in the past
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 W S 32 34/' >s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 W O 32 52/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 W M 32 38/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 W K 32 36/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 S O 34 52/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 S M 34 38/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 S K 34 36/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 O M 52 38/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 O K 52 36/' >>s2mRM
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python s2mRM_auto.py $1 M K 38 36/' >>s2mRM

# single-population models:
# one growth period
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python onegrowth_auto.py $1 W 32/' >oneGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python onegrowth_auto.py $1 S 34/' >>oneGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python onegrowth_auto.py $1 O 52/' >>oneGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python onegrowth_auto.py $1 M 38/' >>oneGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python onegrowth_auto.py $1 K 36/' >>oneGR

# two growth periods
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twogrowth_auto.py $1 W 32/' >twoGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twogrowth_auto.py $1 S 34/' >>twoGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twogrowth_auto.py $1 O 52/' >>twoGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twogrowth_auto.py $1 M 38/' >>twoGR
ls *data.boot*[0-9] | perl -pe 's/(\S+)/python twogrowth_auto.py $1 K 36/' >>twoGR


#------------------------
# fixing param lines in s2m outputs

cat s2mRM.o* | perl -pe 's/(.+)params(.+)(\d)\n/$1params$2$3/' | perl -pe 's/\s?\]\n/\n/ ' >s2mRM.o.streamlined
cat te2d.o* | perl -pe 's/(.+)params(.+)(\d)\n/$1params$2$3/' | perl -pe 's/\s?\]\n/\n/ ' >te2d.o.streamlined
cat s2m.o* | perl -pe 's/(.+)params(.+)(\d)\n/$1params$2$3/' | perl -pe 's/\s?\]\n/\n/ ' >s2m.o.streamlined


#-------------------------
# collecting results: s2m

# collecting params
grep -E "W S.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WS_s2m_params.txt
grep -E "W O.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WO_s2m_params.txt
grep -E "W M.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WM_s2m_params.txt
grep -E "W K.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WK_s2m_params.txt
grep -E "S O.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >SO_s2m_params.txt
grep -E "S M.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >SM_s2m_params.txt
grep -E "S K.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >SK_s2m_params.txt
grep -E "O M.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >OM_s2m_params.txt
grep -E "O K.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >OK_s2m_params.txt
grep -E "M K.*params" s2m.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >MK_s2m_params.txt

# collecting thetas
grep -E "W S.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >WS_s2m_theta.txt
grep -E "W O.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >WO_s2m_theta.txt
grep -E "W M.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >WM_s2m_theta.txt
grep -E "W K.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >WK_s2m_theta.txt
grep -E "S O.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >SO_s2m_theta.txt
grep -E "S M.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >SM_s2m_theta.txt
grep -E "S K.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >SK_s2m_theta.txt
grep -E "O M.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >OM_s2m_theta.txt
grep -E "O K.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >OK_s2m_theta.txt
grep -E "M K.*theta" s2m.o.streamlined | awk '{print $2,$3,$4,$6}'  >MK_s2m_theta.txt

# collecting logLikes
grep -E "W S.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >WS_s2m_logLike.txt
grep -E "W O.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >WO_s2m_logLike.txt
grep -E "W M.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >WM_s2m_logLike.txt
grep -E "W K.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >WK_s2m_logLike.txt
grep -E "S O.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >SO_s2m_logLike.txt
grep -E "S M.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >SM_s2m_logLike.txt
grep -E "S K.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >SK_s2m_logLike.txt
grep -E "O M.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >OM_s2m_logLike.txt
grep -E "O K.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >OK_s2m_logLike.txt
grep -E "M K.*logLike" s2m.o.streamlined | awk '{print $2,$3,$4,$7}'  >MK_s2m_logLike.txt

# collecting results: two-epoch 2d

# collecting params
grep -E "W S.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WS_te2d_params.txt
grep -E "W O.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WO_te2d_params.txt
grep -E "W M.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WM_te2d_params.txt
grep -E "W K.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >WK_te2d_params.txt
grep -E "S O.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >SO_te2d_params.txt
grep -E "S M.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >SM_te2d_params.txt
grep -E "S K.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >SK_te2d_params.txt
grep -E "O M.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >OM_te2d_params.txt
grep -E "O K.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >OK_te2d_params.txt
grep -E "M K.*params" te2d.o.streamlined | awk '{print $2,$3,$4,$8,$9,$10,$11,$12,$13,$14}'  >MK_te2d_params.txt

# collecting thetas
grep -E "W S.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >WS_te2d_theta.txt
grep -E "W O.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >WO_te2d_theta.txt
grep -E "W M.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >WM_te2d_theta.txt
grep -E "W K.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >WK_te2d_theta.txt
grep -E "S O.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >SO_te2d_theta.txt
grep -E "S M.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >SM_te2d_theta.txt
grep -E "S K.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >SK_te2d_theta.txt
grep -E "O M.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >OM_te2d_theta.txt
grep -E "O K.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >OK_te2d_theta.txt
grep -E "M K.*theta" te2d.o.streamlined | awk '{print $2,$3,$4,$6}'  >MK_te2d_theta.txt

# collecting logLikes
grep -E "5k.*W S.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >WS_te2d_logLike.txt
grep -E "5k.*W O.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >WO_te2d_logLike.txt
grep -E "5k.*W M.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >WM_te2d_logLike.txt
grep -E "5k.*W K.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >WK_te2d_logLike.txt
grep -E "5k.*S O.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >SO_te2d_logLike.txt
grep -E "5k.*S M.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >SM_te2d_logLike.txt
grep -E "5k.*S K.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >SK_te2d_logLike.txt
grep -E "5k.*O M.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >OM_te2d_logLike.txt
grep -E "5k.*O K.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >OK_te2d_logLike.txt
grep -E "5k.*M K.*logLike.*-[1-9]" te2d.o.streamlined | awk '{print $2,$3,$4,$7}'  >MK_te2d_logLike.txt

# combining all likelihoods for AIC-bootstrap:

cat *te2d_logLike.txt > te2d_allLikes.txt
cat *s2m_logLike.txt > s2m_allLikes.txt

#-----------------
# analyzing one-pop growth bootstraps

# collecting boots for one-pop two growths:
grep params twoGR.o577512 | perl -pe 's/\:\s+\[|\s+\]$|\]$//g' | awk '{print $2,$3,$5,$6,$7,$8}' >2grBootParams.txt
grep logLike twoGR.o577512 | perl -pe 's/\:\s+\[|\s+\]$|\]$//g' | awk '{print $2,$3,$6}' >2grBootlikes.txt
grep theta twoGR.o577512 | perl -pe 's/\:\s+\[|\s+\]$|\]$//g' | awk '{print $2,$3,$5}' >2grBootTheta.txt

# collecting likelihoods for one-pop one growths
grep logLike 1gr.o528313 | perl -pe 's/\:\s+\[|\s+\]$|\]$//g' | awk '{print $2,$3,$6}' >1grBootlikes.txt
grep theta 1gr.o528313 | perl -pe 's/\:\s+\[|\s+\]$|\]$//g' | awk '{print $2,$3,$5}' >1grThetas.txt

#--------------------
# analyzing results of s2m bootstraps: migrations_S2MBoots.R

# AIC analysis: 
# - for population subdivision (s2m vs twoGrowths2d model): AICweights_s2m-2ep_migration.R
# - s2m with recent migration vs s2m: AICweights_s2mRM-s2m_migration.R
# - one growth vs two growths (for pop size changes): AICweights_2gr_1gr.R

# Pop sizes change calc and plot: 1d_bootplots_2growth_withSE.R

#-----------
# SLiM modeling
# the model: slimQTL_v3.txt See comments within the script for details
# (in addition to QTLs this model includes some unlinked neutral sites to do popgen analysis, if desired.)
# SLiM results plotting: slimPlots_v2.R

#-------------
historical population sizes with stairwayPlot

# creating lists of samples per population
grep "#CHR" Amil_mapped2adig_cleaned.vcf | perl -pe 's/\t/\n/g' | tail +10 >inds
grep "^K" inds >keppel
grep "^W" inds >wilkie
grep "^O" inds >orpheus
grep "^S" inds >sudbury
grep "^M" inds >magnetic

# create a table of individuals to populations with pooled pops
cat wilkie sudbury orpheus magnetic >gbr
vcftools --vcf Amil_mapped2adig_cleaned.vcf --keep gbr --recode --recode-INFO-all --out gbr

# using ANGSD to produce SFS for stairwayPlot out of VCF
angsd -vcf-gl gbr.recode.vcf -fai $WORK/db/adigitifera_genome.fasta.fai -nind 84 -doSaf 1 -anc $WORK/db/adigitifera_genome.fasta -out GBR -P 12

realSFS GBR.saf.idx >GBR.sfs

cat GBR.sfs
# copy this without first and last number
1205.549873 4549.413036 2344.408420 1513.952135 1102.169607 920.347893 789.900934 683.898925 607.684802 507.003071 433.779971 449.789508 346.408127 354.417077 324.987942 291.094444 305.220530 259.333440 236.455528 199.667263 205.118985 212.000954 195.257624 165.763240 183.341094 148.224358 171.019417 155.866988 147.312307 120.504629 108.988220 121.399125 128.334869 102.226777 105.345428 104.953615 91.541177 135.457086 85.750186 93.243257 80.055399 96.657026 106.609066 74.735287 86.097297 59.463397 75.947139 80.652922 67.622045 57.661906 51.637810 74.089825 89.263878 62.897842 70.930937 94.894185 57.918462 69.505983 60.986541 79.275912 68.598825 54.644587 62.987477 48.329086 36.256707 55.488601 41.256811 46.095849 58.498897 32.441679 55.548750 33.124464 33.062128 48.500166 31.222090 44.511390 28.873413 36.631489 54.460285 32.303109 31.629931 32.193240 28.346071 41.079364 29.869377 32.022979 39.460287 24.938251 22.151324 19.447355 22.875250 40.507935 31.025163 25.503787 35.196695 21.342324 44.014018 28.598997 18.779556 32.669381 22.075790 32.392818 30.041228 29.501388 23.802686 30.086018 23.978504 12.803774 31.816651 29.296328 34.134217 15.280259 16.044734 17.572822 24.497544 13.045258 26.558167 25.995895 32.656414 25.883430 23.126480 25.405169 26.853638 16.021631 20.271376 13.916499 19.156336 26.748737 17.996609 17.174250 13.333428 17.495935 15.092635 15.117338 21.628414 25.505034 14.944218 21.397821 15.955891 24.380645 6.482673 25.204705 18.871446 16.272522 9.238492 12.254168 23.723910 19.841370 11.556584 15.063453 14.253844 12.075625 14.967713 8.334841 7.808587 16.115630 5.286960 18.628195 11.010686 10.674307 11.603545 12.767884 10.137035 12.203401 17.419127 8.128979 25.075844 19.583458 37.907201

nano GBR.blueprint
#example blueprint file
#input setting
popid: GBR1200 # id of the population (no white space)
nseq: 168 # number of sequences
L: 810000 # total number of observed nucleic sites, including polymorphic and monomorphic
whether_folded: false # whethr the SFS is folded (true or false)
SFS: 4549.413036 2344.408420 1513.952135 1102.169607 920.347893 789.900934 683.898925 607.684802 507.003071 433.779971 449.789508 346.408127 354.417077 324.987942 291.094444 305.220530 259.333440 236.455528 199.667263 205.118985 212.000954 195.257624 165.763240 183.341094 148.224358 171.019417 155.866988 147.312307 120.504629 108.988220 121.399125 128.334869 102.226777 105.345428 104.953615 91.541177 135.457086 85.750186 93.243257 80.055399 96.657026 106.609066 74.735287 86.097297 59.463397 75.947139 80.652922 67.622045 57.661906 51.637810 74.089825 89.263878 62.897842 70.930937 94.894185 57.918462 69.505983 60.986541 79.275912 68.598825 54.644587 62.987477 48.329086 36.256707 55.488601 41.256811 46.095849 58.498897 32.441679 55.548750 33.124464 33.062128 48.500166 31.222090 44.511390 28.873413 36.631489 54.460285 32.303109 31.629931 32.193240 28.346071 41.079364 29.869377 32.022979 39.460287 24.938251 22.151324 19.447355 22.875250 40.507935 31.025163 25.503787 35.196695 21.342324 44.014018 28.598997 18.779556 32.669381 22.075790 32.392818 30.041228 29.501388 23.802686 30.086018 23.978504 12.803774 31.816651 29.296328 34.134217 15.280259 16.044734 17.572822 24.497544 13.045258 26.558167 25.995895 32.656414 25.883430 23.126480 25.405169 26.853638 16.021631 20.271376 13.916499 19.156336 26.748737 17.996609 17.174250 13.333428 17.495935 15.092635 15.117338 21.628414 25.505034 14.944218 21.397821 15.955891 24.380645 6.482673 25.204705 18.871446 16.272522 9.238492 12.254168 23.723910 19.841370 11.556584 15.063453 14.253844 12.075625 14.967713 8.334841 7.808587 16.115630 5.286960 18.628195 11.010686 10.674307 11.603545 12.767884 10.137035 12.203401 17.419127 8.128979 25.075844 19.583458
#smallest_size_of_SFS_bin_used_for_estimation: 1 # default is 1; to ignore singletons, change this number to 2
#largest_size_of_SFS_bin_used_for_estimation: # default is n-1; to ignore singletons, change this number to nseq-2
pct_training: 0.67 # percentage of sites for training
nrand: 40 80 120 160 # number of random break points for each try (separated by white space)roughly (nseq-2)/4, (nseq-2)/2, (nseq-2)*3/4, nseq-2
project_dir: GBR # project directory
stairway_plot_dir: $WORK/stairway_plot_v2beta/stairway_plot_es # directory to the stairway plot files
ninput: 200 # number of input files to be created for each estimation
#output setting
mu: 2e-8 # assumed mutation rate per site per generation
year_per_generation: 5 # assumed generation time (in years)
#plot setting
plot_title: GBR # title of the plot
xrange: 0.1,10000 # Time (1k year) range; format: xmin,xmax; "0,0" for default
yrange: 0,0 # Ne (1k individual) range; format: xmin,xmax; "0,0" for default
xspacing: 2 # X axis spacing
yspacing: 2 # Y axis spacing
fontsize: 12 # Font size


java -cp $WORK/stairway_plot_v2beta/stairway_plot_es Stairbuilder GBR.blueprint 
grep swarmops GBR.blueprint.sh > addTheta
launcher_creator.py -j addTheta -n at -e matz@utexas.edu -a tagmap -t 0:15:00 -w 46 -q normal
sbatch at.slurm
grep -v swarmops GBR.blueprint.sh >movesPlots
bash movesPlots

#--------
for Keppel

vcftools --vcf Amil_mapped2adig_cleaned.vcf --keep keppel --recode --recode-INFO-all --out kep
angsd -vcf-gl kep.recode.vcf -fai $WORK/db/adigitifera_genome.fasta.fai -nind 20 -doSaf 1 -anc $WORK/db/adigitifera_genome.fasta -out KEP -P 12
realSFS KEP.saf.idx >KEP.sfs

cat KEP.sfs
9128.906693 3611.990493 2187.088546 1468.783882 1111.829035 927.319642 661.421821 595.049705 467.266975 448.244660 370.848669 346.221690 312.925242 317.474469 286.236966 241.602681 208.187119 187.327138 184.846970 146.758348 154.407846 122.384161 126.151723 114.592811 99.665114 113.626239 132.292202 96.202238 112.921098 81.487293 106.384906 86.260840 79.385024 86.838447 61.289235 65.937772 66.982235 47.258521 60.012192 45.858007 116.731355

nano KEP.blueprint
#example blueprint file
#input setting
popid: KEP # id of the population (no white space)
nseq: 40 # number of sequences
L: 810000 # total number of observed nucleic sites, including polymorphic and monomorphic
whether_folded: false # whethr the SFS is folded (true or false)
SFS: 3611.990493 2187.088546 1468.783882 1111.829035 927.319642 661.421821 595.049705 467.266975 448.244660 370.848669 346.221690 312.925242 317.474469 286.236966 241.602681 208.187119 187.327138 184.846970 146.758348 154.407846 122.384161 126.151723 114.592811 99.665114 113.626239 132.292202 96.202238 112.921098 81.487293 106.384906 86.260840 79.385024 86.838447 61.289235 65.937772 66.982235 47.258521 60.012192 45.858007
#smallest_size_of_SFS_bin_used_for_estimation: 1 # default is 1; to ignore singletons, change this number to 2
#largest_size_of_SFS_bin_used_for_estimation: # default is n-1; to ignore singletons, change this number to nseq-2
pct_training: 0.67 # percentage of sites for training
nrand: 9 18 27 38 # number of random break points for each try (separated by white space)roughly (nseq-2)/4, (nseq-2)/2, (nseq-2)*3/4, nseq-2
project_dir: KEP # project directory
stairway_plot_dir: $WORK/stairway_plot_v2beta/stairway_plot_es # directory to the stairway plot files
ninput: 200 # number of input files to be created for each estimation
#output setting
mu: 2e-8 # assumed mutation rate per site per generation
year_per_generation: 5 # assumed generation time (in years)
#plot setting
plot_title: KEP # title of the plot
xrange: 0.1,10000 # Time (1k year) range; format: xmin,xmax; "0,0" for default
yrange: 0,0 # Ne (1k individual) range; format: xmin,xmax; "0,0" for default
xspacing: 2 # X axis spacing
yspacing: 2 # Y axis spacing
fontsize: 12 # Font size


java -cp $WORK/stairway_plot_v2beta/stairway_plot_es Stairbuilder KEP.blueprint 
grep swarmops KEP.blueprint.sh > addThetaK
launcher_creator.py -j addThetaK -n atk -e matz@utexas.edu -a tagmap -t 0:15:00 -w 46 -q normal
sbatch atk.slurm
grep -v swarmops KEP.blueprint.sh >movesPlotsK
bash movesPlotsK

#======================


scp *final.summary file from the project directory to laptop, use GBR_stairway.R to plot


